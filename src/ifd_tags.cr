require "./ifd"
require "./tag_types"
require "./interoperability"

# Regroup tags from Image, Thumbnail, Photo & GPS as there should be no collision.
# AKA (IFD0, IFD1, SUBIFD, GPSIFD)
# It is more practical than splitting them because
# a lot of picture have those tags in the wrong IFD.
# Interoperability is kept separated because it collide with GPS and it rarely mix up with other ifd
class MakeItRight::Ifd
  register_tags [
    # GPS
    {gps_version, 0x0000, Bytes, nil},
    {latitude_ref, 0x0001, String, nil},
    {latitude, 0x0002, Array(Rational(UInt32)), nil},
    {longitude_ref, 0x0003, String, nil},
    {longitude, 0x0004, Array(Rational(UInt32)), nil},
    {altitude_ref, 0x0005, UInt8, nil},
    {altitude, 0x0006, Rational(UInt32), nil},
    {timestamp, 0x0007, Array(Rational(UInt32)), nil},
    {satellites, 0x0008, String, nil},
    {status, 0x0009, String, nil},
    {measure_mode, 0x000a, String, nil},
    {dop, 0x000b, Rational(UInt32), nil},
    {speed_ref, 0x000c, String, nil},
    {speed, 0x000d, Rational(UInt32), nil},
    {track_ref, 0x000e, String, nil},
    {track, 0x000f, Rational(UInt32), nil},
    {img_direction_ref, 0x0010, String, nil},
    {img_direction, 0x0011, Rational(UInt32), nil},
    {map_datum, 0x0012, String, nil},
    {dest_latitude_ref, 0x0013, String, nil},
    {dest_latiture, 0x0014, Array(Rational(UInt32)), nil},
    {dest_longitude_ref, 0x0015, String, nil},
    {dest_longitude, 0x0016, Array(Rational(UInt32)), nil},
    {dest_bearing_ref, 0x0017, String, nil},
    {dest_bearing, 0x0018, Rational(UInt32), nil},
    {dest_distance_ref, 0x0019, String, nil},
    {dest_distance, 0x001a, Rational(UInt32), nil},
    {processing_method, 0x001b, Bytes, nil},
    {area_information, 0x001c, Bytes, nil},
    {date_stamp, 0x001d, String, nil},
    {differential, 0x001e, UInt16, nil},
    {positioning_error, 0x001f, Rational(UInt32), nil},

    # Image IFD
    {image_width, 0x0100, UInt16 | UInt32, nil},
    {image_height, 0x0101, UInt16 | UInt32, nil},
    {bit_per_sample, 0x0102, Array(UInt16), nil},
    {compression, 0x0103, Compression, nil},
    {photometric_interpretation, 0x0106, PhotometricInterpretation, nil},
    {description, 0x010e, String, nil},
    {make, 0x010f, String, nil},
    {model, 0x0110, String, nil},
    {strip_offsets, 0x0111, Array(UInt16 | UInt32), nil},
    {orientation, 0x0112, Orientation, nil},
    {samples_per_pixel, 0x0115, UInt16, nil},
    {row_per_strip, 0x0116, UInt16, nil},
    {strip_byte_count, 0x0117, UInt16 | UInt32, nil},
    {x_resolution, 0x011a, Rational(UInt32), nil},
    {y_resolution, 0x011b, Rational(UInt32), nil},
    {planar_configuration, 0x011c, UInt16, nil}, # Interpretation vary
    {resolution_unit, 0x0128, Unit, nil},
    {software, 0x0131, String, nil},
    {date_time, 0x0132, Time, nil},
    {artist, 0x013b, String, nil},
    {white_point, 0x013e, Array(Rational(UInt32)), nil},
    {primary_chromacities, 0x013f, Array(Rational(UInt32)), nil},
    {jpeg_if_offset, 0x0201, UInt32, nil},
    {jpeg_if_byte_count, 0x0202, UInt32, nil},
    {ycbcr_coefficients, 0x0211, Array(Rational(UInt32)), nil},
    {ycbcr_sub_sampling, 0x0212, Array(UInt16), nil},
    {ycbcr_positioning, 0x0213, UInt16, nil},
    {reference_black_white, 0x0214, Array(Rational(UInt32)), nil},
    {copyright, 0x8298, String, nil},
    {exif, 0x8769, Ifd, nil},
    {gps, 0x8825, Ifd, nil},
    {print_image_matching, 0xc4a5, Bytes, nil}, # No more info
    # Windows
    {title, 0x9c9b, String, nil},
    {comment, 0x9c9c, String, nil},
    {author, 0x9c9d, String, nil},
    {keywords, 0x9c9e, String, nil},
    {subject, 0x9c9f, String, nil},

    # EXIF
    {exposure_time, 0x829a, Rational(UInt32), nil},
    {f_number, 0x829d, Rational(UInt32), nil},
    {exposure_program, 0x8822, ExposureProgram, nil},
    {iso_speed_ratings, 0x8827, Array(UInt16), nil},
    {oecf, 0x8828, Bytes, nil},         # Could be parsed
    {exif_version, 0x9000, Bytes, nil}, # not String because it has no null terminator
    {date_time_original, 0x9003, Time, nil},
    {date_time_digitized, 0x9004, Time, nil},
    {components_configuration, 0x9101, Bytes, nil}, # maybe parse it,
    {compressed_bits_per_pixel, 0x9102, Rational(UInt32), nil},
    {shutter_speed_value, 0x9201, Rational(Int32), nil},
    {aperture_value, 0x9202, Rational(UInt32), nil},
    {brightness_value, 0x9203, Rational(Int32), nil},
    {exposure_bias_value, 0x9204, Rational(Int32), nil},
    {max_aperture_value, 0x9205, Rational(UInt32), nil},
    {subject_distance, 0x9206, Rational(Int32), nil}, # meter. maybe add optional unit to rational ?
    {metering_mode, 0x9207, MeteringMode, nil},
    {light_source, 0x9208, LightSource, nil},
    {flash, 0x9209, UInt16, ->(value : UInt16) { Flash.new value }},
    {focal_length, 0x920a, Rational(UInt32), nil},
    {maker_note, 0x927c, Bytes, nil},
    {user_comment, 0x9286, Bytes, ->(value : Bytes) { UserComment.from_value value }},
    {subsec_time, 0x9290, String, ->(v : String) { v.chars.all?(&.== Char::ZERO) ? nil : v.to_i.milliseconds }},
    {subsec_time_original, 0x9291, String, ->(v : String) { v.chars.all?(&.== Char::ZERO) ? nil : v.to_i.milliseconds }},
    {subsec_time_digitized, 0x9292, String, ->(v : String) { v.chars.all?(&.== Char::ZERO) ? nil : v.to_i.milliseconds }},
    {flash_pix_version, 0xa000, Bytes, nil}, # No null terminator
    {color_space, 0xa001, ColorSpace, nil},
    {exif_image_width, 0xa002, UInt16 | UInt32 | Array(UInt16), nil},
    {exif_image_height, 0xa003, UInt16 | UInt32 | Array(UInt16), nil},
    {related_sound_file, 0xa004, String, nil},
    {flash_energy, 0xa20b, Rational(Int32), nil},
    {interoperability, 0xa005, Interoperability, nil},
    {focal_plane_x_resolution, 0xa20e, Rational(UInt32), nil},
    {focal_plane_y_resolution, 0xa20f, Rational(UInt32), nil},
    {focal_plane_resolution_unit, 0xa210, Unit, nil},
    {exposure_index, 0xa215, Rational(UInt32), nil}, # See iso_speed_rating, same format but unsigned. Historical error.
    {sensing_method, 0xa217, SensingMethod, nil},
    {file_source, 0xa300, Bytes, nil},
    {scene_type, 0xa301, Bytes, nil},
    {cfa_pattern, 0xa302, Bytes, nil},
    {custom_rendered, 0xa401, UInt16, ->(value : UInt16) { value != 0 }},
    {exposure_mode, 0xa402, ExposureMode, nil},
    {white_balance, 0xa403, WhiteBalance, nil},
    {digital_zoom_ratio, 0xa404, Rational(UInt32), nil},
    {focal_length_in_35mm_film, 0xa405, UInt16, nil},
    {scene_capture_type, 0xa406, SceneType, nil},
    {gain_control, 0xa407, GainControl, nil},
    {contrast, 0xa408, Contrast, nil},
    {saturation, 0xa409, Saturation, nil},
    {sharpness, 0xa40a, Sharpness, nil},
    {gamma, 0xa500, Rational(UInt32), nil},
    {device_setting_description, 0xa40b, Bytes, nil},
    {subject_distance_range, 0xa40c, DistanceRange, nil},
    {image_uid, 0xa420, String, nil},
    {subject_area, 0x9214, Array(UInt16), nil},
    {sensitivity_type, 0x8830, UInt16, nil}, # I dont know how to interpret it
    {camera_owner_name, 0xa430, String, nil},
    {lens_specifications, 0xa432, Array(Rational(UInt32)), nil},
    {lens_make, 0xa433, String, nil},
    {lens_model, 0xa434, String, nil},
    {lens_serial_number, 0xa435, String, nil},
    {offset_time, 0x9010, String, nil},
    {offset_time_original, 0x9011, String, nil},
    {offset_time_digitized, 0x9012, String, nil},
    {body_serial_number, 0xa431, String, nil},
    {offset_schema, 0xea1d, UInt32, nil},
  ]
end
